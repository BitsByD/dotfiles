set encoding=utf-8
filetype on " not on by default in Mac, so stop it barfing when we try to...
"filetype off " ...turn it off!
python from powerline.vim import setup as powerline_setup
python powerline_setup()
python del powerline_setup

" Bundle setup
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()
" Original repos on github
Bundle 'gmarik/vundle'
Bundle 'Shougo/unite.vim'
Bundle 'Shougo/vimproc.vim'
Bundle 'Shougo/neomru.vim'
Bundle 'Shougo/neoyank.vim'
Bundle 'Shougo/vimfiler.vim'
Bundle 'rking/ag.vim'
Bundle 'davidhalter/jedi-vim'
Bundle 'tpope/vim-sensible'
Bundle 'ctrlpvim/ctrlp.vim'
Bundle 'klen/python-mode'
Bundle 'SirVer/ultisnips'
Bundle 'tpope/vim-fugitive'
Bundle 'vim-scripts/ZenCoding.vim.git'
Bundle 'tpope/vim-git'
filetype plugin indent on " required for Bundle to work

" Use spaces instead of tabs
set tabstop=4
set shiftwidth=4
set softtabstop=4
set expandtab
syntax enable
" Enable copy to clipboard
set clipboard=unnamed
" Turn on line numbers
set number
" allow switching from an unsaved buffer without first having to save it
set hidden
set t_Co=256  " make use of 256 terminal colors
"color summerfruit256
"color Tomorrow
"color darcula
set background=dark
colorscheme PaperColor
"color Tomorrow-Night
let mapleader=","

" ,x will reload the ~/.vimrc file
map <leader>x :so $MYVIMRC<CR>

" show whitespace
set listchars=tab:→.,trail:.,extends:#,nbsp:.,precedes:<
set list
highlight SpecialKey term=standout ctermfg=grey ctermbg=yellow guifg=grey guibg=yellow

" Filetype specific tabs and spaces
" Only do this part when compiled with support for autocommands
if has("autocmd")
  " Enable file type detection
    filetype on
    " Syntax of these languages is fussy over tabs Vs spaces
    autocmd FileType make setlocal ts=8 sts=8 sw=8 noexpandtab
    autocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab

    " Customisations based on house-style (arbitrary)
    autocmd FileType html setlocal ts=2 sts=2 sw=2 expandtab
    autocmd FileType javascript setlocal ts=2 sts=2 sw=2 expandtab
    autocmd FileType css setlocal ts=2 sts=2 sw=2 expandtab
    " Treat .rss files as XML
    autocmd BufNewFile,BufRead *.rss setfiletype xml
endif

" Spell-check Markdown files
autocmd FileType markdown setlocal spell
" And make the highlighted text readable
hi SpellBad ctermfg=000 guifg=#000

" Spell-check Git messages
autocmd FileType gitcommit setlocal spell

" Unite settings
" call unite#filters#matcher_default#use(['matcher_fuzzy'])
" Hide stuff we don't care about from the file search
call unite#custom_source('file_rec/async', 'ignore_pattern', '.repo')
let g:unite_source_file_rec_max_cache_files = 0
call unite#custom#source('file_mru,file_rec,file_rec/async,grepocate', 'max_candidates', 0)
if executable('ag')
    let g:unite_source_grep_command = 'ag'
    let g:unite_source_grep_default_opts =
        \ '--smart-case --line-numbers --nocolor --nogroup'
    let g:unite_source_grep_recursive_opt = ''
    let g:unite_source_rec_async_command =
        \ ['ag', '--smart-case', '--follow', '--nocolor', '--nogroup',
        \  '--hidden', '-g', '']
endif

" Custom mappings for the unite buffer
autocmd FileType unite call s:unite_settings()
function! s:unite_settings()
  " Enable navigation with control-j and control-k in insert mode
  imap <buffer> <C-j>   <Plug>(unite_select_next_line)
  imap <buffer> <C-k>   <Plug>(unite_select_previous_line)
endfunction

" Find files recursively in the current directory
nnoremap <silent> <leader>l :<C-u>Unite -no-split -start-insert file_rec/async<CR>

" Open an in-place list of open buffers
nnoremap <silent> <leader>b :Unite -no-split buffer file_mru<CR>

" Open an in-place list of the most recently used files
nnoremap <silent> <leader>m :Unite -no-split file_mru<CR>

" Open an in-place list of the yanked buffers
nnoremap <silent> <leader>y :Unite -no-split history/yank<CR>

" Open an in-place list of search results in current file
nnoremap <silent> <leader>g :Unite -no-split vimgrep:%<CR>


" VimFiler for file navigation
let g:vimfiler_as_default_explorer = 1
let g:vimfiler_ignore_pattern = ['^\.git$', '^\.repo$', '^\.DS_Store$', '^.+?\.sw.?$']
map <leader>f :VimFilerExplorer -parent -find<CR>
let g:vimfiler_tree_leaf_icon = ' '
let g:vimfiler_tree_opened_icon = '▾'
let g:vimfiler_tree_closed_icon = '▸'
let g:vimfiler_file_icon = '-'

" Ignore a bunch of typical stuff I never want to see in an editor
set wildignore=*.swp,*.bak,*.pyc,*.class

" Make Powerline look great
set laststatus=2 " always display the status line
" hide the usual fill characters
set fillchars+=stl:\ ,stlnc:\
" Set the terminal font using the ssh tool or whatever, but
" if you're in the gui version of vim, use the patched font.
set guifont=Source\ Code\ Pro\ for\ Powerline:h11
" let it go crazy with awesome glyphs
let g:Powerline_symbols="fancy"

augroup vimrc_autocmds
    autocmd!
    " Highlight characters longer than 80 chars in Python
    autocmd FileType python highlight Excess ctermbg=Yellow guibg=Black
    autocmd FileType python match Excess /\%80v.*/
    autocmd FileType python set nowrap
augroup END

" Python-mode
" Activate rope
" Keys:
" K             Show python docs
" <Ctrl-Space>  Rope autocomplete
" <Ctrl-c>g     Rope goto definition
" <Ctrl-c>d     Rope show documentation
" <Ctrl-c>f     Rope find occurrences
" <Leader>b     Set, unset breakpoint (g:pymode_breakpoint enabled)
" [[            Jump on previous class or function (normal, visual, operator modes)
" ]]            Jump on next class or function (normal, visual, operator modes)
" [M            Jump on previous class or method (normal, visual, operator modes)
" ]M            Jump on next class or method (normal, visual, operator modes)
let g:pymode_rope = 0
let g:pymode_rope_goto_definition_bind = "<leader>]"

" Documentation
let g:pymode_doc = 1
let g:pymode_doc_key = 'K'

"Linting
let g:pymode_lint = 1
let g:pymode_lint_checker = "pyflakes,pep8"
" Auto check on save
" let g:pymode_lint_write = 1

" Support virtualenv
let g:pymode_virtualenv = 1

" Enable breakpoints plugin
let g:pymode_breakpoint = 0

" syntax highlighting
let g:pymode_syntax = 1
let g:pymode_syntax_all = 1
let g:pymode_syntax_indent_errors = g:pymode_syntax_all
let g:pymode_syntax_space_errors = g:pymode_syntax_all

" Don't autofold code
let g:pymode_folding = 0

" Syntastic settings
let g:syntastic_check_on_open=1
let g:syntastic_enable_signs=1
let g:syntastic_auto_jump=1
let g:syntastic_auto_loc_list=1
let g:syntastic_always_populate_loc_list=1
let g:syntastic_stl_format = '[%E{Err: %fe #%e}%B{, }%W{Warn: %fw #%w}]'
let g:syntastic_loc_list_height=5
let g:syntastic_javascript_checkers=['jshint']

" Zen Coding settings
" I like Ctrl-e as a trigger
let g:user_zen_expandabbr_key = '<c-e>'

